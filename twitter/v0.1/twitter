/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:fs('..')})},
	'embedableTimeline': function(args, opts) {
		var id;
		if (typeof args == 'number')
			id = args
		else
			id = args.id || 0;

		if (id == 0) {
			echo('error: id required');
			return;
		}
		render({id: id}, {
			view: '<a class="twitter-timeline" href="https://twitter.com/twitterapi" data-widget-id="<%= data.id %>">Tweets de @twitterapi</a><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>'
		})
	},
	'homeTimeline': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/statuses/home_timeline.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1 && args['/count']) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		if (url.indexOf('[/max_id]') !== -1 && args['/max_id']) {
			url = url.replace('[/max_id]', '/' + args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		if (url.indexOf('[/since_id]') !== -1 && args['/since_id']) {
			url = url.replace('[/since_id]', '/' + args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/trim_user]') !== -1 && args['/trim_user']) {
			url = url.replace('[/trim_user]', '/' + args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		var rgx = new RegExp('\{exclud_replies\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['exclud_replies'])
			if (args['exclud_replies']) delete args['exclud_replies']
		}
		if (url.indexOf('[/exclud_replies]') !== -1 && args['/exclud_replies']) {
			url = url.replace('[/exclud_replies]', '/' + args['exclud_replies'])
			if (args['exclud_replies']) delete args['exclud_replies']
		}
		var rgx = new RegExp('\{contributor_details\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contributor_details'])
			if (args['contributor_details']) delete args['contributor_details']
		}
		if (url.indexOf('[/contributor_details]') !== -1 && args['/contributor_details']) {
			url = url.replace('[/contributor_details]', '/' + args['contributor_details'])
			if (args['contributor_details']) delete args['contributor_details']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/max_id]') !== -1) url = url.replace('[/max_id]', '')
		if (url.indexOf('[/since_id]') !== -1) url = url.replace('[/since_id]', '')
		if (url.indexOf('[/trim_user]') !== -1) url = url.replace('[/trim_user]', '')
		if (url.indexOf('[/exclud_replies]') !== -1) url = url.replace('[/exclud_replies]', '')
		if (url.indexOf('[/contributor_details]') !== -1) url = url.replace('[/contributor_details]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'userTimeline': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/statuses/user_timeline.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1 && args['/count']) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		if (url.indexOf('[/since_id]') !== -1 && args['/since_id']) {
			url = url.replace('[/since_id]', '/' + args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		if (url.indexOf('[/max_id]') !== -1 && args['/max_id']) {
			url = url.replace('[/max_id]', '/' + args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/trim_user]') !== -1 && args['/trim_user']) {
			url = url.replace('[/trim_user]', '/' + args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		var rgx = new RegExp('\{exclude_replies\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['exclude_replies'])
			if (args['exclude_replies']) delete args['exclude_replies']
		}
		if (url.indexOf('[/exclude_replies]') !== -1 && args['/exclude_replies']) {
			url = url.replace('[/exclude_replies]', '/' + args['exclude_replies'])
			if (args['exclude_replies']) delete args['exclude_replies']
		}
		var rgx = new RegExp('\{contributor_details\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contributor_details'])
			if (args['contributor_details']) delete args['contributor_details']
		}
		if (url.indexOf('[/contributor_details]') !== -1 && args['/contributor_details']) {
			url = url.replace('[/contributor_details]', '/' + args['contributor_details'])
			if (args['contributor_details']) delete args['contributor_details']
		}
		var rgx = new RegExp('\{include_rts\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_rts'])
			if (args['include_rts']) delete args['include_rts']
		}
		if (url.indexOf('[/include_rts]') !== -1 && args['/include_rts']) {
			url = url.replace('[/include_rts]', '/' + args['include_rts'])
			if (args['include_rts']) delete args['include_rts']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/since_id]') !== -1) url = url.replace('[/since_id]', '')
		if (url.indexOf('[/max_id]') !== -1) url = url.replace('[/max_id]', '')
		if (url.indexOf('[/trim_user]') !== -1) url = url.replace('[/trim_user]', '')
		if (url.indexOf('[/exclude_replies]') !== -1) url = url.replace('[/exclude_replies]', '')
		if (url.indexOf('[/contributor_details]') !== -1) url = url.replace('[/contributor_details]', '')
		if (url.indexOf('[/include_rts]') !== -1) url = url.replace('[/include_rts]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'mentionsTimeline': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/statuses/mentions_timeline.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1 && args['/count']) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		if (url.indexOf('[/max_id]') !== -1 && args['/max_id']) {
			url = url.replace('[/max_id]', '/' + args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		if (url.indexOf('[/since_id]') !== -1 && args['/since_id']) {
			url = url.replace('[/since_id]', '/' + args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{contributor_details\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contributor_details'])
			if (args['contributor_details']) delete args['contributor_details']
		}
		if (url.indexOf('[/contributor_details]') !== -1 && args['/contributor_details']) {
			url = url.replace('[/contributor_details]', '/' + args['contributor_details'])
			if (args['contributor_details']) delete args['contributor_details']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/max_id]') !== -1) url = url.replace('[/max_id]', '')
		if (url.indexOf('[/since_id]') !== -1) url = url.replace('[/since_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/contributor_details]') !== -1) url = url.replace('[/contributor_details]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'retweetsOfMe': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/statuses/retweets_of_me.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1 && args['/count']) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		if (url.indexOf('[/max_id]') !== -1 && args['/max_id']) {
			url = url.replace('[/max_id]', '/' + args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		if (url.indexOf('[/since_id]') !== -1 && args['/since_id']) {
			url = url.replace('[/since_id]', '/' + args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{include_user_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_user_entities'])
			if (args['include_user_entities']) delete args['include_user_entities']
		}
		if (url.indexOf('[/include_user_entities]') !== -1 && args['/include_user_entities']) {
			url = url.replace('[/include_user_entities]', '/' + args['include_user_entities'])
			if (args['include_user_entities']) delete args['include_user_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/max_id]') !== -1) url = url.replace('[/max_id]', '')
		if (url.indexOf('[/since_id]') !== -1) url = url.replace('[/since_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/include_user_entities]') !== -1) url = url.replace('[/include_user_entities]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'showStatus': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/statuses/show/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/trim_user]') !== -1 && args['/trim_user']) {
			url = url.replace('[/trim_user]', '/' + args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		var rgx = new RegExp('\{include_my_retweet\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_my_retweet'])
			if (args['include_my_retweet']) delete args['include_my_retweet']
		}
		if (url.indexOf('[/include_my_retweet]') !== -1 && args['/include_my_retweet']) {
			url = url.replace('[/include_my_retweet]', '/' + args['include_my_retweet'])
			if (args['include_my_retweet']) delete args['include_my_retweet']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/trim_user]') !== -1) url = url.replace('[/trim_user]', '')
		if (url.indexOf('[/include_my_retweet]') !== -1) url = url.replace('[/include_my_retweet]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'tweet': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/statuses/update.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['status'] == null) throw new Error('status is a required parameter')
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1 && args['/place_id']) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		if (url.indexOf('[/long]') !== -1 && args['/long']) {
			url = url.replace('[/long]', '/' + args['long'])
			if (args['long']) delete args['long']
		}
		var rgx = new RegExp('\{in_reply_to_status_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['in_reply_to_status_id'])
			if (args['in_reply_to_status_id']) delete args['in_reply_to_status_id']
		}
		if (url.indexOf('[/in_reply_to_status_id]') !== -1 && args['/in_reply_to_status_id']) {
			url = url.replace('[/in_reply_to_status_id]', '/' + args['in_reply_to_status_id'])
			if (args['in_reply_to_status_id']) delete args['in_reply_to_status_id']
		}
		var rgx = new RegExp('\{display_coordinates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['display_coordinates'])
			if (args['display_coordinates']) delete args['display_coordinates']
		}
		if (url.indexOf('[/display_coordinates]') !== -1 && args['/display_coordinates']) {
			url = url.replace('[/display_coordinates]', '/' + args['display_coordinates'])
			if (args['display_coordinates']) delete args['display_coordinates']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1 && args['/lat']) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/trim_user]') !== -1 && args['/trim_user']) {
			url = url.replace('[/trim_user]', '/' + args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/long]') !== -1) url = url.replace('[/long]', '')
		if (url.indexOf('[/in_reply_to_status_id]') !== -1) url = url.replace('[/in_reply_to_status_id]', '')
		if (url.indexOf('[/display_coordinates]') !== -1) url = url.replace('[/display_coordinates]', '')
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/trim_user]') !== -1) url = url.replace('[/trim_user]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'destroyStatus': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/statuses/destroy/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/trim_user]') !== -1 && args['/trim_user']) {
			url = url.replace('[/trim_user]', '/' + args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/trim_user]') !== -1) url = url.replace('[/trim_user]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'retweet': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/statuses/retweet/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/trim_user]') !== -1 && args['/trim_user']) {
			url = url.replace('[/trim_user]', '/' + args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/trim_user]') !== -1) url = url.replace('[/trim_user]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'retweets': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/statuses/retweets/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1 && args['/count']) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{trim_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/trim_user]') !== -1 && args['/trim_user']) {
			url = url.replace('[/trim_user]', '/' + args['trim_user'])
			if (args['trim_user']) delete args['trim_user']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/trim_user]') !== -1) url = url.replace('[/trim_user]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'showUser': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/users/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'lookupUsers': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/users/lookup.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'searchUsers': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/users/search.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1 && args['/page']) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1 && args['/count']) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'usersSuggestions': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/users/suggestions.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{lang\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lang'])
			if (args['lang']) delete args['lang']
		}
		if (url.indexOf('[/lang]') !== -1 && args['/lang']) {
			url = url.replace('[/lang]', '/' + args['lang'])
			if (args['lang']) delete args['lang']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/lang]') !== -1) url = url.replace('[/lang]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'usersSuggestionsCategory': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/users/suggestions/{slug}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['slug'] == null) args['slug'] = "twitter"
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{lang\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lang'])
			if (args['lang']) delete args['lang']
		}
		if (url.indexOf('[/lang]') !== -1 && args['/lang']) {
			url = url.replace('[/lang]', '/' + args['lang'])
			if (args['lang']) delete args['lang']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/lang]') !== -1) url = url.replace('[/lang]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'directMessages': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/direct_messages.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1 && args['/count']) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		if (url.indexOf('[/max_id]') !== -1 && args['/max_id']) {
			url = url.replace('[/max_id]', '/' + args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1 && args['/page']) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		if (url.indexOf('[/since_id]') !== -1 && args['/since_id']) {
			url = url.replace('[/since_id]', '/' + args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/max_id]') !== -1) url = url.replace('[/max_id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since_id]') !== -1) url = url.replace('[/since_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'directMessagesSent': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/direct_messages/sent.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1 && args['/count']) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		if (url.indexOf('[/max_id]') !== -1 && args['/max_id']) {
			url = url.replace('[/max_id]', '/' + args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1 && args['/page']) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		if (url.indexOf('[/since_id]') !== -1 && args['/since_id']) {
			url = url.replace('[/since_id]', '/' + args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/max_id]') !== -1) url = url.replace('[/max_id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since_id]') !== -1) url = url.replace('[/since_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'showDirectMessage': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/direct_messages/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1 && args['/id']) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'newDirectMessage': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/direct_messages/new.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1 && args['/text']) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'destroyDirectMessage': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/direct_messages/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'DELETE',params:args, auth:'oauth1'}, opts)
	},
	'follow': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/friendships/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{follow\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['follow'])
			if (args['follow']) delete args['follow']
		}
		if (url.indexOf('[/follow]') !== -1 && args['/follow']) {
			url = url.replace('[/follow]', '/' + args['follow'])
			if (args['follow']) delete args['follow']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/follow]') !== -1) url = url.replace('[/follow]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'unfollow': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/friendships/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:fs('..'),url:url,method:'DELETE',params:args, auth:'oauth1'}, opts)
	},
	'showFriendship': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/friendships/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{source_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['source_id'])
			if (args['source_id']) delete args['source_id']
		}
		if (url.indexOf('[/source_id]') !== -1 && args['/source_id']) {
			url = url.replace('[/source_id]', '/' + args['source_id'])
			if (args['source_id']) delete args['source_id']
		}
		var rgx = new RegExp('\{source_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['source_screen_name'])
			if (args['source_screen_name']) delete args['source_screen_name']
		}
		if (url.indexOf('[/source_screen_name]') !== -1 && args['/source_screen_name']) {
			url = url.replace('[/source_screen_name]', '/' + args['source_screen_name'])
			if (args['source_screen_name']) delete args['source_screen_name']
		}
		var rgx = new RegExp('\{target_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['target_id'])
			if (args['target_id']) delete args['target_id']
		}
		if (url.indexOf('[/target_id]') !== -1 && args['/target_id']) {
			url = url.replace('[/target_id]', '/' + args['target_id'])
			if (args['target_id']) delete args['target_id']
		}
		var rgx = new RegExp('\{target_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['target_screen_name'])
			if (args['target_screen_name']) delete args['target_screen_name']
		}
		if (url.indexOf('[/target_screen_name]') !== -1 && args['/target_screen_name']) {
			url = url.replace('[/target_screen_name]', '/' + args['target_screen_name'])
			if (args['target_screen_name']) delete args['target_screen_name']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/source_id]') !== -1) url = url.replace('[/source_id]', '')
		if (url.indexOf('[/source_screen_name]') !== -1) url = url.replace('[/source_screen_name]', '')
		if (url.indexOf('[/target_id]') !== -1) url = url.replace('[/target_id]', '')
		if (url.indexOf('[/target_screen_name]') !== -1) url = url.replace('[/target_screen_name]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'incomingFriendships': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/friendships/incoming.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{stringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		if (url.indexOf('[/stringify_ids]') !== -1 && args['/stringify_ids']) {
			url = url.replace('[/stringify_ids]', '/' + args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		if (url.indexOf('[/stringify_ids]') !== -1) url = url.replace('[/stringify_ids]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'outgoingFriendships': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/friendships/outgoing.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{stringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		if (url.indexOf('[/stringify_ids]') !== -1 && args['/stringify_ids']) {
			url = url.replace('[/stringify_ids]', '/' + args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		if (url.indexOf('[/stringify_ids]') !== -1) url = url.replace('[/stringify_ids]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'friends': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/friends/ids.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{stringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		if (url.indexOf('[/stringify_ids]') !== -1 && args['/stringify_ids']) {
			url = url.replace('[/stringify_ids]', '/' + args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		if (url.indexOf('[/stringify_ids]') !== -1) url = url.replace('[/stringify_ids]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'followers': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/followers/ids.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{stringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		if (url.indexOf('[/stringify_ids]') !== -1 && args['/stringify_ids']) {
			url = url.replace('[/stringify_ids]', '/' + args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		if (url.indexOf('[/stringify_ids]') !== -1) url = url.replace('[/stringify_ids]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'accountVerifyCredentials': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/account/verify_credentials.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'getLists': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/list.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'listsMemberships': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/memberships.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{filter_to_owned_lists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_to_owned_lists'])
			if (args['filter_to_owned_lists']) delete args['filter_to_owned_lists']
		}
		if (url.indexOf('[/filter_to_owned_lists]') !== -1 && args['/filter_to_owned_lists']) {
			url = url.replace('[/filter_to_owned_lists]', '/' + args['filter_to_owned_lists'])
			if (args['filter_to_owned_lists']) delete args['filter_to_owned_lists']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/filter_to_owned_lists]') !== -1) url = url.replace('[/filter_to_owned_lists]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'userListsSubscriptions': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/subscriptions.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'userListShow': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'listStatuses': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/statuses.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1 && args['/count']) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		if (url.indexOf('[/max_id]') !== -1 && args['/max_id']) {
			url = url.replace('[/max_id]', '/' + args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		if (url.indexOf('[/since_id]') !== -1 && args['/since_id']) {
			url = url.replace('[/since_id]', '/' + args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{include_rts\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_rts'])
			if (args['include_rts']) delete args['include_rts']
		}
		if (url.indexOf('[/include_rts]') !== -1 && args['/include_rts']) {
			url = url.replace('[/include_rts]', '/' + args['include_rts'])
			if (args['include_rts']) delete args['include_rts']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/max_id]') !== -1) url = url.replace('[/max_id]', '')
		if (url.indexOf('[/since_id]') !== -1) url = url.replace('[/since_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/include_rts]') !== -1) url = url.replace('[/include_rts]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'createList': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mode'])
			if (args['mode']) delete args['mode']
		}
		if (url.indexOf('[/mode]') !== -1 && args['/mode']) {
			url = url.replace('[/mode]', '/' + args['mode'])
			if (args['mode']) delete args['mode']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1 && args['/description']) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/mode]') !== -1) url = url.replace('[/mode]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'updateList': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/update.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1 && args['/name']) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mode'])
			if (args['mode']) delete args['mode']
		}
		if (url.indexOf('[/mode]') !== -1 && args['/mode']) {
			url = url.replace('[/mode]', '/' + args['mode'])
			if (args['mode']) delete args['mode']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1 && args['/description']) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/mode]') !== -1) url = url.replace('[/mode]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'destroyList': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'listmembers': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/members.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'memberIsInList': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/members/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'listAddMember': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/members/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['list_id'] == null) throw new Error('list_id is a required parameter')
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (args['slug'] == null) throw new Error('slug is a required parameter')
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'listAddMembers': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/members/create_all.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'listRemoveMember': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/members/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'listSubscribers': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/subscribers.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'isSubscriber': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/subscribers/show.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'listSubscribeMe': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/subscribers/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'listUnsubscribeMe': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/lists/subscribers/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{owner_screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		if (url.indexOf('[/owner_screen_name]') !== -1 && args['/owner_screen_name']) {
			url = url.replace('[/owner_screen_name]', '/' + args['owner_screen_name'])
			if (args['owner_screen_name']) delete args['owner_screen_name']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1 && args['/owner_id']) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1 && args['/list_id']) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		var rgx = new RegExp('\{slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/slug]') !== -1 && args['/slug']) {
			url = url.replace('[/slug]', '/' + args['slug'])
			if (args['slug']) delete args['slug']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/owner_screen_name]') !== -1) url = url.replace('[/owner_screen_name]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/slug]') !== -1) url = url.replace('[/slug]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'accountUpdateProfileColors': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/account/update_profile_colors.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{profile_background_color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_background_color'])
			if (args['profile_background_color']) delete args['profile_background_color']
		}
		if (url.indexOf('[/profile_background_color]') !== -1 && args['/profile_background_color']) {
			url = url.replace('[/profile_background_color]', '/' + args['profile_background_color'])
			if (args['profile_background_color']) delete args['profile_background_color']
		}
		var rgx = new RegExp('\{profile_link_color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_link_color'])
			if (args['profile_link_color']) delete args['profile_link_color']
		}
		if (url.indexOf('[/profile_link_color]') !== -1 && args['/profile_link_color']) {
			url = url.replace('[/profile_link_color]', '/' + args['profile_link_color'])
			if (args['profile_link_color']) delete args['profile_link_color']
		}
		var rgx = new RegExp('\{profile_sidebar_border_color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_sidebar_border_color'])
			if (args['profile_sidebar_border_color']) delete args['profile_sidebar_border_color']
		}
		if (url.indexOf('[/profile_sidebar_border_color]') !== -1 && args['/profile_sidebar_border_color']) {
			url = url.replace('[/profile_sidebar_border_color]', '/' + args['profile_sidebar_border_color'])
			if (args['profile_sidebar_border_color']) delete args['profile_sidebar_border_color']
		}
		var rgx = new RegExp('\{profile_sidebar_fill_color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_sidebar_fill_color'])
			if (args['profile_sidebar_fill_color']) delete args['profile_sidebar_fill_color']
		}
		if (url.indexOf('[/profile_sidebar_fill_color]') !== -1 && args['/profile_sidebar_fill_color']) {
			url = url.replace('[/profile_sidebar_fill_color]', '/' + args['profile_sidebar_fill_color'])
			if (args['profile_sidebar_fill_color']) delete args['profile_sidebar_fill_color']
		}
		var rgx = new RegExp('\{profile_text_color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_text_color'])
			if (args['profile_text_color']) delete args['profile_text_color']
		}
		if (url.indexOf('[/profile_text_color]') !== -1 && args['/profile_text_color']) {
			url = url.replace('[/profile_text_color]', '/' + args['profile_text_color'])
			if (args['profile_text_color']) delete args['profile_text_color']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/profile_background_color]') !== -1) url = url.replace('[/profile_background_color]', '')
		if (url.indexOf('[/profile_link_color]') !== -1) url = url.replace('[/profile_link_color]', '')
		if (url.indexOf('[/profile_sidebar_border_color]') !== -1) url = url.replace('[/profile_sidebar_border_color]', '')
		if (url.indexOf('[/profile_sidebar_fill_color]') !== -1) url = url.replace('[/profile_sidebar_fill_color]', '')
		if (url.indexOf('[/profile_text_color]') !== -1) url = url.replace('[/profile_text_color]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'accountUpdateProfileImage': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/account/update_profile_image.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['image'] == null) throw new Error('image is a required parameter')
		var rgx = new RegExp('\{image\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['image'])
			if (args['image']) delete args['image']
		}
		if (url.indexOf('[/image]') !== -1) {
			url = url.replace('[/image]', '/' + args['image'])
			if (args['image']) delete args['image']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/image]') !== -1) url = url.replace('[/image]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'accountUpdateProfileBackgroundImage': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/account/update_profile_background_image.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{tile\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tile'])
			if (args['tile']) delete args['tile']
		}
		if (url.indexOf('[/tile]') !== -1 && args['/tile']) {
			url = url.replace('[/tile]', '/' + args['tile'])
			if (args['tile']) delete args['tile']
		}
		var rgx = new RegExp('\{image\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['image'])
			if (args['image']) delete args['image']
		}
		if (url.indexOf('[/image]') !== -1 && args['/image']) {
			url = url.replace('[/image]', '/' + args['image'])
			if (args['image']) delete args['image']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{use\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['use'])
			if (args['use']) delete args['use']
		}
		if (url.indexOf('[/use]') !== -1 && args['/use']) {
			url = url.replace('[/use]', '/' + args['use'])
			if (args['use']) delete args['use']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/tile]') !== -1) url = url.replace('[/tile]', '')
		if (url.indexOf('[/image]') !== -1) url = url.replace('[/image]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/use]') !== -1) url = url.replace('[/use]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'accountUpdateProfile': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/account/update_profile.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1 && args['/name']) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1 && args['/url']) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{location\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['location'])
			if (args['location']) delete args['location']
		}
		if (url.indexOf('[/location]') !== -1 && args['/location']) {
			url = url.replace('[/location]', '/' + args['location'])
			if (args['location']) delete args['location']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1 && args['/description']) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/location]') !== -1) url = url.replace('[/location]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'favorites': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/favorites/list.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1 && args['/count']) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		if (url.indexOf('[/since_id]') !== -1 && args['/since_id']) {
			url = url.replace('[/since_id]', '/' + args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{max_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		if (url.indexOf('[/max_id]') !== -1 && args['/max_id']) {
			url = url.replace('[/max_id]', '/' + args['max_id'])
			if (args['max_id']) delete args['max_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1 && args['/page']) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/since_id]') !== -1) url = url.replace('[/since_id]', '')
		if (url.indexOf('[/max_id]') !== -1) url = url.replace('[/max_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'favoriteStatus': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/favorites/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'unfavoriteStatus': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/favorites/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'DELETE',params:args, auth:'oauth1'}, opts)
	},
	'blockUser': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/blocks/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'unblockUser': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/blocks/destroy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		return http({provider:fs('..'),url:url,method:'DELETE',params:args, auth:'oauth1'}, opts)
	},
	'blocksList': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/blocks/list.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		var rgx = new RegExp('\{skip_status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		if (url.indexOf('[/skip_status]') !== -1 && args['/skip_status']) {
			url = url.replace('[/skip_status]', '/' + args['skip_status'])
			if (args['skip_status']) delete args['skip_status']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		if (url.indexOf('[/skip_status]') !== -1) url = url.replace('[/skip_status]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'blockedIds': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/blocks/ids.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{sringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sringify_ids'])
			if (args['sringify_ids']) delete args['sringify_ids']
		}
		if (url.indexOf('[/sringify_ids]') !== -1 && args['/sringify_ids']) {
			url = url.replace('[/sringify_ids]', '/' + args['sringify_ids'])
			if (args['sringify_ids']) delete args['sringify_ids']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/sringify_ids]') !== -1) url = url.replace('[/sringify_ids]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'reportSpam': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/users/report_spam.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'savedSearches': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/saved_searches/list.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'savedSearchesById': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/saved_searches/show/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'createSavedSearch': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/saved_searches/create.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['query'] == null) throw new Error('query is a required parameter')
		var rgx = new RegExp('\{query\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['query'])
			if (args['query']) delete args['query']
		}
		if (url.indexOf('[/query]') !== -1) {
			url = url.replace('[/query]', '/' + args['query'])
			if (args['query']) delete args['query']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/query]') !== -1) url = url.replace('[/query]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'deleteSavedSearch': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/saved_searches/destroy/{id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:fs('..'),url:url,method:'DELETE',params:args, auth:'oauth1'}, opts)
	},
	'userTrendingLocations': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/trends/available.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'trendingTopics': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/trends/place.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['exclude'] == null) throw new Error('exclude is a required parameter')
		var rgx = new RegExp('\{exclude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['exclude'])
			if (args['exclude']) delete args['exclude']
		}
		if (url.indexOf('[/exclude]') !== -1) {
			url = url.replace('[/exclude]', '/' + args['exclude'])
			if (args['exclude']) delete args['exclude']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/exclude]') !== -1) url = url.replace('[/exclude]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'closestTrendsTo': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/trends/closest.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1 && args['/lat']) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (args['long'] == null) throw new Error('long is a required parameter')
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		if (url.indexOf('[/long]') !== -1) {
			url = url.replace('[/long]', '/' + args['long'])
			if (args['long']) delete args['long']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/long]') !== -1) url = url.replace('[/long]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'geoSearch': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/geo/search.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{ip\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ip'])
			if (args['ip']) delete args['ip']
		}
		if (url.indexOf('[/ip]') !== -1 && args['/ip']) {
			url = url.replace('[/ip]', '/' + args['ip'])
			if (args['ip']) delete args['ip']
		}
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		if (url.indexOf('[/long]') !== -1 && args['/long']) {
			url = url.replace('[/long]', '/' + args['long'])
			if (args['long']) delete args['long']
		}
		var rgx = new RegExp('\{max_results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_results'])
			if (args['max_results']) delete args['max_results']
		}
		if (url.indexOf('[/max_results]') !== -1 && args['/max_results']) {
			url = url.replace('[/max_results]', '/' + args['max_results'])
			if (args['max_results']) delete args['max_results']
		}
		var rgx = new RegExp('\{granularity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['granularity'])
			if (args['granularity']) delete args['granularity']
		}
		if (url.indexOf('[/granularity]') !== -1 && args['/granularity']) {
			url = url.replace('[/granularity]', '/' + args['granularity'])
			if (args['granularity']) delete args['granularity']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1 && args['/lat']) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{accuracy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		if (url.indexOf('[/accuracy]') !== -1 && args['/accuracy']) {
			url = url.replace('[/accuracy]', '/' + args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		var rgx = new RegExp('\{contained_within\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contained_within'])
			if (args['contained_within']) delete args['contained_within']
		}
		if (url.indexOf('[/contained_within]') !== -1 && args['/contained_within']) {
			url = url.replace('[/contained_within]', '/' + args['contained_within'])
			if (args['contained_within']) delete args['contained_within']
		}
		var rgx = new RegExp('\{street_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['street_address'])
			if (args['street_address']) delete args['street_address']
		}
		if (url.indexOf('[/street_address]') !== -1 && args['/street_address']) {
			url = url.replace('[/street_address]', '/' + args['street_address'])
			if (args['street_address']) delete args['street_address']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1 && args['/callback']) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/ip]') !== -1) url = url.replace('[/ip]', '')
		if (url.indexOf('[/long]') !== -1) url = url.replace('[/long]', '')
		if (url.indexOf('[/max_results]') !== -1) url = url.replace('[/max_results]', '')
		if (url.indexOf('[/granularity]') !== -1) url = url.replace('[/granularity]', '')
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/accuracy]') !== -1) url = url.replace('[/accuracy]', '')
		if (url.indexOf('[/contained_within]') !== -1) url = url.replace('[/contained_within]', '')
		if (url.indexOf('[/street_address]') !== -1) url = url.replace('[/street_address]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'geoSimilarPlaces': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/geo/similar_places.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1 && args['/lat']) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		if (url.indexOf('[/long]') !== -1 && args['/long']) {
			url = url.replace('[/long]', '/' + args['long'])
			if (args['long']) delete args['long']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1 && args['/name']) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{contained_within\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contained_within'])
			if (args['contained_within']) delete args['contained_within']
		}
		if (url.indexOf('[/contained_within]') !== -1 && args['/contained_within']) {
			url = url.replace('[/contained_within]', '/' + args['contained_within'])
			if (args['contained_within']) delete args['contained_within']
		}
		var rgx = new RegExp('\{street_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['street_address'])
			if (args['street_address']) delete args['street_address']
		}
		if (url.indexOf('[/street_address]') !== -1 && args['/street_address']) {
			url = url.replace('[/street_address]', '/' + args['street_address'])
			if (args['street_address']) delete args['street_address']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1 && args['/callback']) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/long]') !== -1) url = url.replace('[/long]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/contained_within]') !== -1) url = url.replace('[/contained_within]', '')
		if (url.indexOf('[/street_address]') !== -1) url = url.replace('[/street_address]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'geocode': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/geo/reverse_geocode.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		if (url.indexOf('[/long]') !== -1 && args['/long']) {
			url = url.replace('[/long]', '/' + args['long'])
			if (args['long']) delete args['long']
		}
		var rgx = new RegExp('\{max_results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_results'])
			if (args['max_results']) delete args['max_results']
		}
		if (url.indexOf('[/max_results]') !== -1 && args['/max_results']) {
			url = url.replace('[/max_results]', '/' + args['max_results'])
			if (args['max_results']) delete args['max_results']
		}
		var rgx = new RegExp('\{granularity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['granularity'])
			if (args['granularity']) delete args['granularity']
		}
		if (url.indexOf('[/granularity]') !== -1 && args['/granularity']) {
			url = url.replace('[/granularity]', '/' + args['granularity'])
			if (args['granularity']) delete args['granularity']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1 && args['/lat']) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{accuracy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		if (url.indexOf('[/accuracy]') !== -1 && args['/accuracy']) {
			url = url.replace('[/accuracy]', '/' + args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1 && args['/callback']) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/long]') !== -1) url = url.replace('[/long]', '')
		if (url.indexOf('[/max_results]') !== -1) url = url.replace('[/max_results]', '')
		if (url.indexOf('[/granularity]') !== -1) url = url.replace('[/granularity]', '')
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/accuracy]') !== -1) url = url.replace('[/accuracy]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'getPlaceInfo': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/geo/id/{place_id}.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['place_id'] == null) throw new Error('place_id is a required parameter')
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'createPlace': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/geo/place.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1 && args['/lat']) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{long\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['long'])
			if (args['long']) delete args['long']
		}
		if (url.indexOf('[/long]') !== -1 && args['/long']) {
			url = url.replace('[/long]', '/' + args['long'])
			if (args['long']) delete args['long']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1 && args['/name']) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1 && args['/token']) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		var rgx = new RegExp('\{contained_within\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contained_within'])
			if (args['contained_within']) delete args['contained_within']
		}
		if (url.indexOf('[/contained_within]') !== -1 && args['/contained_within']) {
			url = url.replace('[/contained_within]', '/' + args['contained_within'])
			if (args['contained_within']) delete args['contained_within']
		}
		var rgx = new RegExp('\{street_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['street_address'])
			if (args['street_address']) delete args['street_address']
		}
		if (url.indexOf('[/street_address]') !== -1 && args['/street_address']) {
			url = url.replace('[/street_address]', '/' + args['street_address'])
			if (args['street_address']) delete args['street_address']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1 && args['/callback']) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/long]') !== -1) url = url.replace('[/long]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		if (url.indexOf('[/contained_within]') !== -1) url = url.replace('[/contained_within]', '')
		if (url.indexOf('[/street_address]') !== -1) url = url.replace('[/street_address]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'configuration': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/help/configuration.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'termsOfService': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/help/tos.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'privacyPolicy': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/help/privacy.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'friendsIds': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/friends/ids.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1 && args['/user_id']) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{screen_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		if (url.indexOf('[/screen_name]') !== -1 && args['/screen_name']) {
			url = url.replace('[/screen_name]', '/' + args['screen_name'])
			if (args['screen_name']) delete args['screen_name']
		}
		var rgx = new RegExp('\{cursor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		if (url.indexOf('[/cursor]') !== -1 && args['/cursor']) {
			url = url.replace('[/cursor]', '/' + args['cursor'])
			if (args['cursor']) delete args['cursor']
		}
		var rgx = new RegExp('\{stringify_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		if (url.indexOf('[/stringify_ids]') !== -1 && args['/stringify_ids']) {
			url = url.replace('[/stringify_ids]', '/' + args['stringify_ids'])
			if (args['stringify_ids']) delete args['stringify_ids']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/screen_name]') !== -1) url = url.replace('[/screen_name]', '')
		if (url.indexOf('[/cursor]') !== -1) url = url.replace('[/cursor]', '')
		if (url.indexOf('[/stringify_ids]') !== -1) url = url.replace('[/stringify_ids]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'oauth1'}, opts)
	},
	'accountUpdateDeliveryDevice': function(args, opts) {
		var url = 'https://api.twitter.com/1.1/account/update_delivery_device.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['device'] == null) throw new Error('device is a required parameter')
		var rgx = new RegExp('\{device\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['device'])
			if (args['device']) delete args['device']
		}
		if (url.indexOf('[/device]') !== -1) {
			url = url.replace('[/device]', '/' + args['device'])
			if (args['device']) delete args['device']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/device]') !== -1) url = url.replace('[/device]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'POST',params:args, auth:'oauth1'}, opts)
	},
	'search': function(args, opts) {
		var url = 'http://search.twitter.com/search.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1 && args['/callback']) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{geocode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['geocode'])
			if (args['geocode']) delete args['geocode']
		}
		if (url.indexOf('[/geocode]') !== -1 && args['/geocode']) {
			url = url.replace('[/geocode]', '/' + args['geocode'])
			if (args['geocode']) delete args['geocode']
		}
		var rgx = new RegExp('\{lang\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lang'])
			if (args['lang']) delete args['lang']
		}
		if (url.indexOf('[/lang]') !== -1 && args['/lang']) {
			url = url.replace('[/lang]', '/' + args['lang'])
			if (args['lang']) delete args['lang']
		}
		var rgx = new RegExp('\{locale\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['locale'])
			if (args['locale']) delete args['locale']
		}
		if (url.indexOf('[/locale]') !== -1 && args['/locale']) {
			url = url.replace('[/locale]', '/' + args['locale'])
			if (args['locale']) delete args['locale']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1 && args['/page']) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{result_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['result_type'])
			if (args['result_type']) delete args['result_type']
		}
		if (url.indexOf('[/result_type]') !== -1 && args['/result_type']) {
			url = url.replace('[/result_type]', '/' + args['result_type'])
			if (args['result_type']) delete args['result_type']
		}
		var rgx = new RegExp('\{rpp\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rpp'])
			if (args['rpp']) delete args['rpp']
		}
		if (url.indexOf('[/rpp]') !== -1 && args['/rpp']) {
			url = url.replace('[/rpp]', '/' + args['rpp'])
			if (args['rpp']) delete args['rpp']
		}
		var rgx = new RegExp('\{show_user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['show_user'])
			if (args['show_user']) delete args['show_user']
		}
		if (url.indexOf('[/show_user]') !== -1 && args['/show_user']) {
			url = url.replace('[/show_user]', '/' + args['show_user'])
			if (args['show_user']) delete args['show_user']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1 && args['/until']) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{since_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		if (url.indexOf('[/since_id]') !== -1 && args['/since_id']) {
			url = url.replace('[/since_id]', '/' + args['since_id'])
			if (args['since_id']) delete args['since_id']
		}
		var rgx = new RegExp('\{include_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/include_entities]') !== -1 && args['/include_entities']) {
			url = url.replace('[/include_entities]', '/' + args['include_entities'])
			if (args['include_entities']) delete args['include_entities']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/geocode]') !== -1) url = url.replace('[/geocode]', '')
		if (url.indexOf('[/lang]') !== -1) url = url.replace('[/lang]', '')
		if (url.indexOf('[/locale]') !== -1) url = url.replace('[/locale]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/result_type]') !== -1) url = url.replace('[/result_type]', '')
		if (url.indexOf('[/rpp]') !== -1) url = url.replace('[/rpp]', '')
		if (url.indexOf('[/show_user]') !== -1) url = url.replace('[/show_user]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/since_id]') !== -1) url = url.replace('[/since_id]', '')
		if (url.indexOf('[/include_entities]') !== -1) url = url.replace('[/include_entities]', '')
		return http({provider:fs('..'),url:url,method:'GET',params:args, auth:'none'}, opts)
	}
})
